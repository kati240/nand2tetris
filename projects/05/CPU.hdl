// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.
    DMux(in=true, sel=instruction[15], a=AInstruction, b=CInstruction);
    And(a=CInstruction, b=instruction[12], out=useA);
    Mux16(a=outARegister, b=inM, sel=useA, out=usedFromA);

    ALU(x=outDRegister, y=usedFromA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=isZero, ng=isNegative);

    And(a=CInstruction, b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outDRegister);

    And(a=AInstruction, b=true, out=selInstructionForA);
    And(a=CInstruction, b=instruction[5], out=selOutALUforA);

    Or(a=selInstructionForA, b=selOutALUforA, out=actuallyLoadInA);

    Mux16(a=false, b=instruction, sel=selInstructionForA, out=outTemp1);
    Mux16(a=outTemp1, b=outALU, sel=selOutALUforA, out=realOut);

    ARegister(in=realOut, load=actuallyLoadInA, out=outARegister, out[0..14]=addressM);

    DMux(in=CInstruction, sel=instruction[3], a=dc4, b=writeM);

    Or(a=isZero, b=isNegative, out=notPO);
    Not(in=notPO, out=isPositive);

    And(a=instruction[2], b=isNegative, out=condition1);
    And(a=instruction[1], b=isZero, out=condition2);
    And(a=instruction[0], b=isPositive, out=condition3);
    
    Or8Way(in[7]=AInstruction,in[6]=AInstruction,in[5]=AInstruction,in[4]=AInstruction,in[3]=AInstruction, in[0]=condition1 ,in[1]=condition2, in[2]=condition3, out=loadPC1);
    And(a=CInstruction, b=loadPC1, out=loadPC);

    Not(in=loadPC, out=incPC);
    PC(in=outARegister, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);   
}
