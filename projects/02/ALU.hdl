// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    //// Replace this comment with your code.

    // for x
    And16(a=x, b[0..15]=false, out=notX);
    Mux16(a=x, b=notX, sel=zx, out=xAfterFirst);

    Not16(in=xAfterFirst, out=xAfterFirstNot);
    Mux16(a=xAfterFirst, b=xAfterFirstNot, sel=nx, out=finalX);

    // for y
    And16(a=y, b[0..15]=false, out=notY);
    Mux16(a=y, b=notY, sel=zy, out=yAfterFirst);

    Not16(in=yAfterFirst, out=yAfterFirstNot);
    Mux16(a=yAfterFirst, b=yAfterFirstNot, sel=ny, out=finalY);

    // for out
    Add16(a=finalX, b=finalY, out=addXY);
    And16(a=finalX, b=finalY, out=andXY);

    Mux16(a=andXY, b=addXY, sel=f, out=tempOut);
    Not16(in=tempOut, out=tempOutNot);

    Mux16(a=tempOut, b=tempOutNot, sel=no, out=out, out[15]=forNeg, out[0..7]=firstHalf, out[8..15]=secondHalf);

    // for zr
    Or8Way(in=firstHalf, out=orFirst8);
    Or8Way(in=secondHalf, out=orSecond8);
    Or(a=orFirst8, b=orSecond8, out=sel1);
    Mux(a=true, b=false, sel=sel1, out=zr);

    // for ng
    And(a=forNeg, b=forNeg, out=ng);

}